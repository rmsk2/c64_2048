!zone draw

.SCREEN_RAM_BASE = $0400
.COLOR_RAM_BASE =  $D800
.FRAME_COLOR_ADR = $D020
.BACKGROUND_COLOR_ADR = $D021
.ORIGIN_LINE = 4
.ORIGIN_COL = 6 
HOUR_ADDRESS = 1024 + 21 * 40 + 19
MINUTE_ADDRESS = 1024 + 21 * 40 + 22
SECOND_ADDRESS = 1024 + 21 * 40 + 25


COLOR_BLACK = 0
COLOR_WHITE = 1
COLOR_RED = 2
COLOR_CYAN = 3
COLOR_PURPLE = 4
COLOR_GREEN = 5
COLOR_BLUE = 6
COLOR_YELLOW = 7
COLOR_ORANGE = 8
COLOR_BROWN = 9
COLOR_PINK = 10
COLOR_DARK_GREY = 11
COLOR_GREY = 12
COLOR_LIGHT_GREEN = 13
COLOR_LIGHT_BLUE = 14
COLOR_LIGHT_GREY = 15

; A7-AB are used by the cassete routines => not needed
.DATA_PTR = $A7;$A8
.SCREEN_RAM = $A9;$AA
.COLOR_RAM = $9E;$9F

.CURRENT_COLOR
!byte $00

; --------------------------------------------------
; initDrawing initializes the drawing routines
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
initDrawing
    jsr clearScreen
    lda #COLOR_BLACK
    sta .FRAME_COLOR_ADR
    sta .BACKGROUND_COLOR_ADR
    jsr copyAndSwitchToModifiedFont
    jsr modifyFont
    rts


; --------------------------------------------------
; setOutputColor sets the output color. Intended for code in other zones
; that does not "see" the "local" label .CURRENT_COLOR
; 
; INPUT:  Color in accu
; OUTPUT: None
; --------------------------------------------------
setOutputColor
    sta .CURRENT_COLOR
    rts

; --------------------------------------------------
; deInitDrawing deinitializes the drawing routines
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
deInitDrawing
    jsr clearScreen
    lda #COLOR_LIGHT_BLUE
    sta .FRAME_COLOR_ADR
    lda #COLOR_BLUE
    sta .BACKGROUND_COLOR_ADR
    jsr restoreROMFont
    
    rts


.DATA_CELL_POS
!byte .ORIGIN_LINE, .ORIGIN_COL            ; line, column cell 0
!byte .ORIGIN_LINE, .ORIGIN_COL + 7        ; line, column cell 1 
!byte .ORIGIN_LINE, .ORIGIN_COL + 14       ; line, column cell 2
!byte .ORIGIN_LINE, .ORIGIN_COL + 21       ; line, column cell 3

!byte .ORIGIN_LINE + 4, .ORIGIN_COL        ; line, column cell 4
!byte .ORIGIN_LINE + 4, .ORIGIN_COL + 7    ; line, column cell 5 
!byte .ORIGIN_LINE + 4, .ORIGIN_COL + 14   ; line, column cell 6
!byte .ORIGIN_LINE + 4, .ORIGIN_COL + 21   ; line, column cell 7

!byte .ORIGIN_LINE + 8, .ORIGIN_COL        ; line, column cell 8
!byte .ORIGIN_LINE + 8, .ORIGIN_COL + 7    ; line, column cell 9 
!byte .ORIGIN_LINE + 8, .ORIGIN_COL + 14   ; line, column cell 10
!byte .ORIGIN_LINE + 8, .ORIGIN_COL + 21   ; line, column cell 11

!byte .ORIGIN_LINE + 12, .ORIGIN_COL       ; line, column cell 12
!byte .ORIGIN_LINE + 12, .ORIGIN_COL + 7   ; line, column cell 13 
!byte .ORIGIN_LINE + 12, .ORIGIN_COL + 14  ; line, column cell 14
!byte .ORIGIN_LINE + 12, .ORIGIN_COL + 21  ; line, column cell 15

.SIX_SPACE_REVERSE
!byte $A0, $A0, $A0, $A0, $A0, $A0

; This table contains 11 instances of a data structure that holds
;
; 1. 6 bytes of text which are displayed in the second line of each rendered cell.
;    The data is not encoded in ASCII. It is given in screen code values.
; 2. One byte for the color which is used to render the whole cell
; 3. One fill byte in order to make length a power of two, here 8. This allows
;    for easy access in absence of a mutliplication instruction
;
.DATA_CELL_VALUES
!byte $A0, $A0, $A0, $A0, $A0, $A0, COLOR_LIGHT_GREY, $00  ; value 0
!byte $A0, $A0, $A0, $B2, $A0, $A0, COLOR_RED, $00         ; value 1 => 2
!byte $A0, $A0, $A0, $B4, $A0, $A0, COLOR_CYAN, $00        ; value 2 => 4
!byte $A0, $A0, $A0, $B8, $A0, $A0, COLOR_PURPLE, $00      ; value 3 => 8
!byte $A0, $A0, $B1, $B6, $A0, $A0, COLOR_GREEN, $00       ; value 4 => 16
!byte $A0, $A0, $B3, $B2, $A0, $A0, COLOR_BLUE, $00        ; value 5 => 32
!byte $A0, $A0, $B6, $B4, $A0, $A0, COLOR_YELLOW, $00      ; value 6 => 64
!byte $A0, $A0, $B1, $B2, $B8, $A0, COLOR_ORANGE, $00      ; value 7 => 128
!byte $A0, $A0, $B2, $B5, $B6, $A0, COLOR_BROWN, $00       ; value 8 => 256
!byte $A0, $A0, $B5, $B1, $B2, $A0, COLOR_PINK, $00        ; value 9 => 512
!byte $A0, $B1, $B0, $B2, $B4, $A0, COLOR_LIGHT_BLUE, $00  ; value 10 => 1024
!byte $A0, $B2, $B0, $B4, $B8, $A0, COLOR_LIGHT_GREEN, $00 ; value 11 => 2048

!macro printAtPos .line, .col, .strAddr, .ptr, .len { 
    ldy .line
    ldx .col
    jsr locateCursor

    +load16BitImmediate .strAddr, .ptr
    lda #.len
    jsr printStr    
}

!macro printAtPosImmediate .line, .col, .strAddr, .ptr, .len { 
    ldy #.line
    ldx #.col
    jsr locateCursor

    +load16BitImmediate .strAddr, .ptr
    lda #.len
    jsr printStr    
}


.POS_LINE !byte $00
.POS_COL  !byte $00
.CELL_TEXT !byte $00,$00,$00,$00,$00,$00
.CELL_COLOR !byte $00
.CELL_COUNT !byte $00
; --------------------------------------------------
; Draws playing field 
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
renderPlayingField 
    jsr renderPoints
    lda #0
    sta .CELL_COUNT
.nextCellRender
    ; load position data
    +load16BitImmediate .DATA_CELL_POS, .DATA_PTR
    lda .CELL_COUNT
    asl                    ; *2
    tay
    lda (.DATA_PTR), Y
    sta .POS_LINE
    iny
    lda (.DATA_PTR), Y
    sta .POS_COL
    
    ; load contents data
    +load16BitImmediate .DATA_CELL_VALUES, .DATA_PTR
    ldy .CELL_COUNT
    lda PLAYINGFIELD, Y
    asl                   ; *2
    asl                   ; *2
    asl                   ; *2
    tay

    ; copy text for cell
    ldx #0
.nextValChar
    lda (.DATA_PTR), Y
    sta .CELL_TEXT, x    
    iny
    inx
    cpx #06
    bne .nextValChar

    ; copy color for cell
    lda (.DATA_PTR),Y
    sta .CELL_COLOR

    lda .CELL_COLOR
    sta .CURRENT_COLOR

    ; write six reverse space characters
    +printAtPos .POS_LINE, .POS_COL, .SIX_SPACE_REVERSE, .DATA_PTR, 6

    ; increment line count
    inc .POS_LINE

    ; write cell text
    +printAtPos .POS_LINE, .POS_COL, .CELL_TEXT, .DATA_PTR, 6

    ; increment line count
    inc .POS_LINE

    ; write six reverse spaces
    +printAtPos .POS_LINE, .POS_COL, .SIX_SPACE_REVERSE, .DATA_PTR, 6

    ; iterate over cells
    inc .CELL_COUNT
    lda #16
    cmp .CELL_COUNT
    beq .doneRender
    jmp .nextCellRender
.doneRender
    rts               

!ct scr
DEC_CHARS
!tx "0123456789"
.SCORE_TXT
!tx "score:"
!ct pet
; --------------------------------------------------
; renderPoints represents the current result points on the screen
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
renderPoints
    ; set output color: 
    lda #COLOR_WHITE
    sta .CURRENT_COLOR

    +printAtPosImmediate .ORIGIN_LINE - 3, .ORIGIN_COL + 14, .SCORE_TXT, .DATA_PTR, 6

    ; set output position 
    ldy #.ORIGIN_LINE - 3      ; line
    ldx #.ORIGIN_COL + 21     ; column
    jsr locateCursor
    
    ldy #00
.outLoop
    ; print current points
    lda POINTS, y
    and #$F0                ; mask out most significant digit
    lsr                     ; shift right 4 times
    lsr
    lsr
    lsr 
    tax
    lda DEC_CHARS, X       ; use result to determine decimal digit
    jsr printChar
    lda POINTS, y
    and #$0F                ; mask out least significant digit
    tax
    lda DEC_CHARS, X
    jsr printChar
    iny 
    cpy #03                ; all digits printed?
    bne .outLoop

    rts


!ct scr
.TIME_TEXT
!tx "time elapsed 00:00:00" 
!ct pet
; -------

; --------------------------------------------------
; renderClock represents the elapsed time on the screen
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
renderClock
    lda #COLOR_GREEN
    sta .CURRENT_COLOR

    +printAtPosImmediate .ORIGIN_LINE + 17, .ORIGIN_COL, .TIME_TEXT, .DATA_PTR, 21

    rts

.OFFSET_ADR
!byte $00, $00
.OFFSET_TMP
!byte $00, $00
; --------------------------------------------------
; .locateCursor sets .DISPLAY_RAM and .COLOR_RAM to the correct address in an area of 40x25 characters.
; 
; INPUT:  x position (0..39) in **y**, y position (0..24) in **x**
; OUTPUT: sets .DISPLAY_RAM and .COLOR_RAM
; --------------------------------------------------
locateCursor
    lda #0
    ; put line number in .OFFSET_ADR
    sta .OFFSET_ADR+1
    sty .OFFSET_ADR
    ; copy line number to .OFFSET_TMP
    +move16Bit .OFFSET_ADR, .OFFSET_TMP
    ; multiply line number by 32 
    +double16Bit .OFFSET_ADR
    +double16Bit .OFFSET_ADR
    +double16Bit .OFFSET_ADR
    +double16Bit .OFFSET_ADR
    +double16Bit .OFFSET_ADR
    ; multiply line number by 8
    +double16Bit .OFFSET_TMP
    +double16Bit .OFFSET_TMP
    +double16Bit .OFFSET_TMP
    ; OFFSET_ADR = line * 32 + line * 8 = line * (8 + 32) = line * 40
    +add16Bit .OFFSET_TMP, .OFFSET_ADR
    ; .OFFSET_TMP = x pos
    lda #0
    sta .OFFSET_TMP+1
    stx .OFFSET_TMP
    +add16Bit .OFFSET_TMP, .OFFSET_ADR
    ; now set base address in screen and color ram
    +load16BitImmediate .SCREEN_RAM_BASE, .SCREEN_RAM
    +add16Bit .OFFSET_ADR, .SCREEN_RAM
    +load16BitImmediate .COLOR_RAM_BASE, .COLOR_RAM
    +add16Bit .OFFSET_ADR, .COLOR_RAM
    rts


; --------------------------------------------------
; clearScreen fills all characters on screen with space.
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
clearScreen
    +load16BitImmediate .SCREEN_RAM_BASE, .SCREEN_RAM

    ldx #0                             ; counts 256 byte block
    lda #32                            ; 32 = blank
    ldy #0                             ; counts bytes in block
.nextByte
    sta (.SCREEN_RAM), Y
    iny
    bne .nextByte                      ; zero flag is set upon overflow 255 => 0
    inc .SCREEN_RAM + 1                ; increment hi byte => clear next block of 256 bytes
    inx
    cpx #4                             ; clear 4 blocks of 256 bytes = 1024 bytes
    bne .nextByte

    ; restore original pointer to screen ram
    +load16BitImmediate .SCREEN_RAM_BASE, .SCREEN_RAM

    rts
    

.PRINT_TMP !byte $00
; --------------------------------------------------
; printChar prints a character to the screen using .CURRENT_COLOR
; 
; INPUT:  Accu contains the character to print
; OUTPUT: None
; --------------------------------------------------
printChar
    sta .PRINT_TMP
    ; save y register
    tya
    pha 

    ; offset is always zero
    ldy #0
    ; set color ram
    lda .CURRENT_COLOR
    sta (.COLOR_RAM), y
    ; print character
    lda .PRINT_TMP
    sta (.SCREEN_RAM), Y

    ; restore y register
    pla
    tay 
    ; increment output memory
    +inc16Bit .COLOR_RAM
    +inc16Bit .SCREEN_RAM

    ; restore accumulator
    lda .PRINT_TMP
    rts

.STR_LEN 
!byte $00
.TMP_YREG
!byte $00
; --------------------------------------------------
; printStr prints a string starting at address given in $A7/$A8
; 
; INPUT:  Accu contains the length of the string to print
; OUTPUT: None
; --------------------------------------------------
printStr
    sta .STR_LEN
    sty .TMP_YREG
    ldy #0
.nextStrChar
    lda (.DATA_PTR), Y
    jsr printChar
    iny
    cpy .STR_LEN
    bne .nextStrChar
    ldy .TMP_YREG

    rts


!ct scr
.GAME_OVER_CHARS
!tx "game over"
.PLAY_IT_AGAIN
!tx " play again [y/n]? "
.FRAME_TEXT
!byte 101
!byte 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
!byte 103
.BLANKS
!byte 79
!byte 119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119
!byte 80
.BLANKS2
!byte 76
!byte 111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111
!byte 122
.BLANKS3
!byte 101
!tx "                   "
!byte 103
.CLEAR_BLANKS
!byte 32
!byte 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
!byte 32
!ct pet


clearFrame
    +printAtPosImmediate .ORIGIN_LINE + 3, .ORIGIN_COL + 4, .CLEAR_BLANKS, .DATA_PTR, .PRINT_WIN_SIZE
    +printAtPosImmediate .ORIGIN_LINE + 4, .ORIGIN_COL + 4, .CLEAR_BLANKS, .DATA_PTR, .PRINT_WIN_SIZE
    +printAtPosImmediate .ORIGIN_LINE + 5, .ORIGIN_COL + 4, .CLEAR_BLANKS, .DATA_PTR, .PRINT_WIN_SIZE
    +printAtPosImmediate .ORIGIN_LINE + 6, .ORIGIN_COL + 4, .CLEAR_BLANKS, .DATA_PTR, .PRINT_WIN_SIZE
    +printAtPosImmediate .ORIGIN_LINE + 7, .ORIGIN_COL + 4, .CLEAR_BLANKS, .DATA_PTR, .PRINT_WIN_SIZE

    rts


; --------------------------------------------------
; gameOver prints GAME OVER on the screen
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
gameOver
    ; set output color 
    lda #COLOR_WHITE
    sta .CURRENT_COLOR
 
    +printAtPosImmediate .ORIGIN_LINE - 3, .ORIGIN_COL, .GAME_OVER_CHARS, .DATA_PTR, 9
    +load16BitImmediate .PLAY_IT_AGAIN, .DATA_PTR
    jmp printQuestionFrame

.PRINT_WIN_SIZE = 21

.QUESTION_TEMP
!byte $00, $00
; --------------------------------------------------
; printQuestionFrame draws text on the screen that is placed in a frame. The position
; of the frame is fixed as well as the size (currently 21 characters).
; 
; INPUT:  .DATA_PTR is set to the message that is to be printed
; OUTPUT: None
; --------------------------------------------------
printQuestionFrame
    ; set output color 
    lda #COLOR_WHITE
    sta .CURRENT_COLOR

    ; save pointer to text
    +move16Bit .DATA_PTR, .QUESTION_TEMP

    ; print empty frame of size 5x21
    +printAtPosImmediate .ORIGIN_LINE + 3, .ORIGIN_COL + 4, .BLANKS, .DATA_PTR, .PRINT_WIN_SIZE
    +printAtPosImmediate .ORIGIN_LINE + 4, .ORIGIN_COL + 4, .BLANKS3, .DATA_PTR, .PRINT_WIN_SIZE
    +printAtPosImmediate .ORIGIN_LINE + 5, .ORIGIN_COL + 4, .FRAME_TEXT, .DATA_PTR, .PRINT_WIN_SIZE
    +printAtPosImmediate .ORIGIN_LINE + 6, .ORIGIN_COL + 4, .BLANKS3, .DATA_PTR, .PRINT_WIN_SIZE
    +printAtPosImmediate .ORIGIN_LINE + 7, .ORIGIN_COL + 4, .BLANKS2, .DATA_PTR, .PRINT_WIN_SIZE

    ; restore pointer to text
    +move16Bit .QUESTION_TEMP, .DATA_PTR 
    ; print message into frame
    ldy #.ORIGIN_LINE + 5
    ldx #.ORIGIN_COL + 5
    jsr locateCursor
    lda #.PRINT_WIN_SIZE - 2
    jsr printStr    

    rts


!ct scr
.YOU_WIN_CHARS
!tx "you win!"
.RU_SURE
!tx "are you sure [y/n]?"
!ct pet

; --------------------------------------------------
; areYouSure displays "are you sure [y/n]?" in a framae 
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
areYouSure
    ; set output color 
    lda #COLOR_WHITE
    sta .CURRENT_COLOR

    ; set output position 
    +load16BitImmediate .RU_SURE, .DATA_PTR

    jmp printQuestionFrame


; --------------------------------------------------
; youWin informs the player that the game was won
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
youWin
    ; set output color 
    lda #COLOR_WHITE
    sta .CURRENT_COLOR

    ; set output position 
    +printAtPosImmediate .ORIGIN_LINE - 3, .ORIGIN_COL, .YOU_WIN_CHARS, .DATA_PTR, 8
    +load16BitImmediate .PLAY_IT_AGAIN, .DATA_PTR

    jmp printQuestionFrame



!macro printAtPosAddr .line, .col, .strAddr, .ptr, .len { 
    ldy .line
    ldx .col
    jsr locateCursor

    +move16Bit .strAddr, .ptr
    lda #.len
    jsr printStr    
}

!ct scr
.INPUT_QUESTION
!tx "    use joystick or keyboard [j/k]?"
.AUTHOR
!tx "zwei hoch 11. by martin grap [2021]"
!ct pet

BIG_TWO
!byte $20, $20, $20, $20, $20, $20, $20, $20 ; ________
!byte $20, $A0, $A0, $A0, $A0, $A0, $A0, $20 ; _******_
!byte $20, $20, $20, $20, $20, $A0, $A0, $20 ; _____**_
!byte $20, $20, $20, $20, $20, $A0, $A0, $20 ; _____**_
!byte $20, $A0, $A0, $A0, $A0, $A0, $A0, $20 ; _******_
!byte $20, $A0, $A0, $20, $20, $20, $20, $20 ; _**_____
!byte $20, $A0, $A0, $20, $20, $20, $20, $20 ; _**_____
!byte $20, $A0, $A0, $A0, $A0, $A0, $A0, $20 ; _******_

BIG_ONE
!byte $20, $20, $20, $20, $20, $20, $20, $20 ; ________
!byte $20, $20, $20, $A0, $A0, $20, $20, $20 ; ___**___
!byte $20, $20, $A0, $A0, $A0, $20, $20, $20 ; __***___
!byte $20, $20, $20, $A0, $A0, $20, $20, $20 ; ___**___
!byte $20, $20, $20, $A0, $A0, $20, $20, $20 ; ___**___
!byte $20, $20, $20, $A0, $A0, $20, $20, $20 ; ___**___
!byte $20, $20, $20, $A0, $A0, $20, $20, $20 ; ___***__
!byte $20, $20, $A0, $A0, $A0, $A0, $20, $20 ; __****__


BIG_BASE
!byte $00, $00
BIG_LINE_LEN
!byte $00, $00
BIG_LINE
!byte 9
BIG_COL
!byte 10

!macro printBigChar .line, .col, .charData, .dataPtr {
    lda #.line
    sta BIG_LINE
    lda #.col
    sta BIG_COL

    +load16BitImmediate .charData, BIG_BASE

    ldy #0
.nextLineStartScreen
    tya
    pha
    +printAtPosAddr BIG_LINE, BIG_COL, BIG_BASE, .dataPtr, 8
    pla
    tay

    inc BIG_LINE
    +add16Bit BIG_LINE_LEN, BIG_BASE
        
    iny
    cpy #8
    bne .nextLineStartScreen
}

; --------------------------------------------------
; askInputSelection draws the title screen ad waits for the user to select
; joystick or keyboard as an input method
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
askInputSelection
    lda #COLOR_BLUE
    sta .CURRENT_COLOR

    +load16BitImmediate 8, BIG_LINE_LEN

    +printBigChar 9, 10, BIG_TWO, .DATA_PTR
    +printBigChar 1, 17, BIG_ONE, .DATA_PTR
    +printBigChar 1, 23, BIG_ONE, .DATA_PTR

    ; set output color 
    lda #COLOR_RED
    sta .CURRENT_COLOR

    +printAtPosImmediate 20, 2, .AUTHOR, .DATA_PTR, 35
    +printAtPosImmediate 24, 0, .INPUT_QUESTION, .DATA_PTR, 35

    rts


.FRAME_TMP
!byte $00
; --------------------------------------------------
; signalIllegalMove gives feedback to the user that the chosesn move was invalid
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
signalIllegalMove
    lda .FRAME_COLOR_ADR
    sta .FRAME_TMP
    lda #COLOR_ORANGE
    sta .FRAME_COLOR_ADR
.delayCount
    ldx #64
    ldy #0
.count256
    iny
    bne .count256
    dex
    bne .count256
    lda .FRAME_TMP
    sta .FRAME_COLOR_ADR
    rts



; --------------------------------------------------
; signalPointsWon gives feedback to the user that points were awarded
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
signalPointsWon
    lda .FRAME_COLOR_ADR
    sta .FRAME_TMP
    lda #COLOR_GREEN
    sta .FRAME_COLOR_ADR

    jmp .delayCount
