!zone draw

.SCREEN_RAM_BASE = $0400
.COLOR_RAM_BASE =  $D800
.FRAME_COLOR_ADR = $D020
.BACKGROUND_COLOR_ADR = $D021

COLOR_BLACK = 0
COLOR_WHITE = 1
COLOR_RED = 2
COLOR_CYAN = 3
COLOR_PURPLE = 4
COLOR_GREEN = 5
COLOR_BLUE = 6
COLOR_YELLOW = 7
COLOR_ORANGE = 8
COLOR_BROWN = 9
COLOR_PINK = 10
COLOR_DARK_GREY = 11
COLOR_GREY = 12
COLOR_LIGHT_GREEN = 13
COLOR_LIGHT_BLUE = 14
COLOR_LIGHT_GREY = 15

; A7-AB are used by the cassete routines => not needed
.DATA_PTR = $A7;$A8
.SCREEN_RAM = $A9;$AA
.COLOR_RAM = $9E;$9F

.CURRENT_COLOR
!byte $00

; --------------------------------------------------
; initDrawing initializes the drawing routines
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
initDrawing
    jsr clearScreen
    lda #COLOR_BLACK
    sta .FRAME_COLOR_ADR
    sta .BACKGROUND_COLOR_ADR
    rts


; --------------------------------------------------
; deInitDrawing deinitializes the drawing routines
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
deInitDrawing
    jsr clearScreen
    lda #COLOR_LIGHT_BLUE
    sta .FRAME_COLOR_ADR
    lda #COLOR_BLUE
    sta .BACKGROUND_COLOR_ADR
    
    rts


.DATA_CELL_POS
!byte 4, 4            ; line, column cell 0
!byte 4, 11           ; line, column cell 1 
!byte 4, 18           ; line, column cell 2
!byte 4, 25           ; line, column cell 3

!byte 8, 4            ; line, column cell 4
!byte 8, 11           ; line, column cell 5 
!byte 8, 18           ; line, column cell 6
!byte 8, 25           ; line, column cell 7

!byte 12, 4           ; line, column cell 8
!byte 12, 11          ; line, column cell 9 
!byte 12, 18          ; line, column cell 10
!byte 12, 25          ; line, column cell 11

!byte 16, 4           ; line, column cell 12
!byte 16, 11          ; line, column cell 13 
!byte 16, 18          ; line, column cell 14
!byte 16, 25          ; line, column cell 15

.SIX_SPACE_REVERSE
!byte $A0, $A0, $A0, $A0, $A0, $A0

.DATA_CELL_VALUES
!byte $A0, $A0, $A0, $A0, $A0, $A0, COLOR_LIGHT_GREY, $00       ; value 0
!byte $A0, $A0, $A0, $B2, $A0, $A0, COLOR_RED, $00         ; value 1 => 2
!byte $A0, $A0, $A0, $B4, $A0, $A0, COLOR_CYAN, $00        ; value 2 => 4
!byte $A0, $A0, $A0, $B8, $A0, $A0, COLOR_PURPLE, $00      ; value 3 => 8
!byte $A0, $A0, $B1, $B6, $A0, $A0, COLOR_GREEN, $00       ; value 4 => 16
!byte $A0, $A0, $B3, $B2, $A0, $A0, COLOR_BLUE, $00        ; value 5 => 32
!byte $A0, $A0, $B6, $B4, $A0, $A0, COLOR_YELLOW, $00      ; value 6 => 64
!byte $A0, $A0, $B1, $B2, $B8, $A0, COLOR_ORANGE, $00      ; value 7 => 128
!byte $A0, $A0, $B2, $B5, $B6, $A0, COLOR_BROWN, $00       ; value 8 => 256
!byte $A0, $A0, $B5, $B1, $B2, $A0, COLOR_PINK, $00        ; value 9 => 512
!byte $A0, $B1, $B0, $B2, $B4, $A0, COLOR_LIGHT_BLUE, $00  ; value 10 => 1024
!byte $A0, $B2, $B0, $B4, $B8, $A0, COLOR_LIGHT_GREEN, $00 ; value 11 => 2048

.POS_LINE !byte $00
.POS_COL  !byte $00
.CELL_TEXT !byte $00,$00,$00,$00,$00,$00
.CELL_COLOR !byte $00
.CELL_COUNT !byte $00
; --------------------------------------------------
; Draws playing field 
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
renderPlayingField 
    jsr renderPoints
    lda #0
    sta .CELL_COUNT
.nextCellRender
    ; load position data
    +load16BitImmediate .DATA_CELL_POS, .DATA_PTR
    lda .CELL_COUNT
    asl                    ; *2
    tay
    lda (.DATA_PTR), Y
    sta .POS_LINE
    iny
    lda (.DATA_PTR), Y
    sta .POS_COL
    
    ; load contents data
    +load16BitImmediate .DATA_CELL_VALUES, .DATA_PTR
    ldy .CELL_COUNT
    lda PLAYINGFIELD, Y
    asl                   ; *2
    asl                   ; *2
    asl                   ; *2
    tay

    ; copy text for cell
    ldx #0
.nextValChar
    lda (.DATA_PTR), Y
    sta .CELL_TEXT, x    
    iny
    inx
    cpx #06
    bne .nextValChar

    ; copy color for cell
    lda (.DATA_PTR),Y
    sta .CELL_COLOR

    lda .CELL_COLOR
    sta .CURRENT_COLOR

    ; write six reverse space characters
    ldy .POS_LINE
    ldx .POS_COL
    jsr locateCursor

    +load16BitImmediate .SIX_SPACE_REVERSE, .DATA_PTR
    lda #06
    jsr printStr

    ; increment line count
    inc .POS_LINE

    ; write cell text
    ldy .POS_LINE
    ldx .POS_COL
    jsr locateCursor

    +load16BitImmediate .CELL_TEXT, .DATA_PTR
    lda #06
    jsr printStr

    ; increment line count
    inc .POS_LINE

    ; write six reverse spaces
    ldy .POS_LINE
    ldx .POS_COL
    jsr locateCursor

    +load16BitImmediate .SIX_SPACE_REVERSE, .DATA_PTR
    lda #06
    jsr printStr

    ; iterate over cells
    inc .CELL_COUNT
    lda #16
    cmp .CELL_COUNT
    beq .doneRender
    jmp .nextCellRender
.doneRender
    rts               

!ct scr
.DEC_CHARS
!tx "0123456789"
!ct pet
; --------------------------------------------------
; renderPoints represents the current result points on the screen
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
renderPoints
    ; set output color: 
    lda #COLOR_WHITE
    sta .CURRENT_COLOR

    ; set output position 
    ldy #1                    ; line
    ldx #14                   ; column
    jsr locateCursor
    
    ldy #00
.outLoop
    ; print current points
    lda POINTS, y
    and #$F0                ; mask out most significant digit
    lsr                     ; shift right 4 times
    lsr
    lsr
    lsr 
    tax
    lda .DEC_CHARS, X       ; use result to determine decimal digit
    jsr printChar
    lda POINTS, y
    and #$0F                ; mask out least significant digit
    tax
    lda .DEC_CHARS, X
    jsr printChar
    iny 
    cpy #03                ; all digits printed?
    bne .outLoop

    rts


.OFFSET_ADR
!byte $00, $00
.OFFSET_TMP
!byte $00, $00
; --------------------------------------------------
; .locateCursor sets .DISPLAY_RAM and .COLOR_RAM to the correct address in an area of 40x25 characters.
; 
; INPUT:  x position (0..39) in **y**, y position (0..24) in **x**
; OUTPUT: sets .DISPLAY_RAM and .COLOR_RAM
; --------------------------------------------------
locateCursor
    lda #0
    ; put line number in .OFFSET_ADR
    sta .OFFSET_ADR+1
    sty .OFFSET_ADR
    ; copy line number to .OFFSET_TMP
    +move16Bit .OFFSET_ADR, .OFFSET_TMP
    ; multiply line number by 32 
    +double16Bit .OFFSET_ADR
    +double16Bit .OFFSET_ADR
    +double16Bit .OFFSET_ADR
    +double16Bit .OFFSET_ADR
    +double16Bit .OFFSET_ADR
    ; multiply line number by 8
    +double16Bit .OFFSET_TMP
    +double16Bit .OFFSET_TMP
    +double16Bit .OFFSET_TMP
    ; OFFSET_ADR = line * 32 + line * 8 = line * (8 + 32) = line * 40
    +add16Bit .OFFSET_TMP, .OFFSET_ADR
    ; .OFFSET_TMP = x pos
    lda #0
    sta .OFFSET_TMP+1
    stx .OFFSET_TMP
    +add16Bit .OFFSET_TMP, .OFFSET_ADR
    ; now set base address in screen and color ram
    +load16BitImmediate .SCREEN_RAM_BASE, .SCREEN_RAM
    +add16Bit .OFFSET_ADR, .SCREEN_RAM
    +load16BitImmediate .COLOR_RAM_BASE, .COLOR_RAM
    +add16Bit .OFFSET_ADR, .COLOR_RAM
    rts


.CLR_LINE_COUNT
!byte $00
; --------------------------------------------------
; clearScreen fills all characters on screen with space.
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
clearScreen
    lda #0
    sta .CLR_LINE_COUNT

.nextLineClr
    ldy .CLR_LINE_COUNT
    ldx #0
    jsr locateCursor

    lda #32
    ldy #0

.nextCharClr
    sta (.SCREEN_RAM), Y
    iny
    cpy #40
    bne .nextCharClr

    inc .CLR_LINE_COUNT
    lda #25
    cmp .CLR_LINE_COUNT
    bne .nextLineClr

    rts
    

.PRINT_TMP !byte $00
; --------------------------------------------------
; printChar prints a character to the screen using .CURRENT_COLOR
; 
; INPUT:  Accu contains the character to print
; OUTPUT: None
; --------------------------------------------------
printChar
    sta .PRINT_TMP
    ; save y register
    tya
    pha 

    ; offset is always zero
    ldy #0
    ; set color ram
    lda .CURRENT_COLOR
    sta (.COLOR_RAM), y
    ; print character
    lda .PRINT_TMP
    sta (.SCREEN_RAM), Y

    ; restore y register
    pla
    tay 
    ; increment output memory
    +inc16Bit .COLOR_RAM
    +inc16Bit .SCREEN_RAM

    ; restore accumulator
    lda .PRINT_TMP
    rts

.STR_LEN 
!byte $00
.TMP_YREG
!byte $00
; --------------------------------------------------
; printStr prints a string starting at address given in $A7/$A8
; 
; INPUT:  Accu contains the length of the string to print
; OUTPUT: None
; --------------------------------------------------
printStr
    sta .STR_LEN
    sty .TMP_YREG
    ldy #0
.nextStrChar
    lda (.DATA_PTR), Y
    jsr printChar
    iny
    cpy .STR_LEN
    bne .nextStrChar
    ldy .TMP_YREG

    rts

!ct scr
.GAME_OVER_CHARS
!tx "game over"
!ct pet
; --------------------------------------------------
; gameOver prints GAME OVER on the screen
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
gameOver
    ; set output color: 
    lda #COLOR_RED
    sta .CURRENT_COLOR

    ; set output position 
    ldy #1                    ; line
    ldx #4                    ; column
    jsr locateCursor

    +load16BitImmediate .GAME_OVER_CHARS, .DATA_PTR
    lda #9                    ; length is 9 bytes
    jsr printStr

    rts