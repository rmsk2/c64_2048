!zone interrupt

.INTERRUPT_VECTOR = $0314
.SYSTEM_INTERRUPT = $EA31
.CIA_CONTROL_REG_B = $DC0F
.CIA_CONTROL_REG_A = $DC0E
.CIA_RTC_TENTH_SECONDS = $DC08
.CIA_RTC_SECONDS = $DC09
.CIA_RTC_MINUTES = $DC0A
.CIA_RTC_HOURS = $DC0B
.CIA_CONTROL_REG = $DC0E


; --------------------------------------------------
; initTimerInterrupt hooks the system interrupt vector and points it to a custom location
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
initTimerInterrupt
    sei
    +load16BitImmediate .interruptServiceRoutine, .INTERRUPT_VECTOR
    cli
    rts


; --------------------------------------------------
; deInitTimeInterrupt restores the system interrupt vector to its original value
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
deInitTimeInterrupt
    sei
    +load16BitImmediate .SYSTEM_INTERRUPT, .INTERRUPT_VECTOR
    cli
    rts

.SAVED_COLOR_POINTER
!byte $00, $00

.INTRPT_COUNTER
!byte $00

; --------------------------------------------------
; .interruptServiceRoutine renders the current time of the RTC and then jums to the origial ISR
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
.interruptServiceRoutine
    lda SHOW_TIMER
    beq .testEffect                           ; timer value is not to be rendered
 
    +splitByte .CIA_RTC_HOURS                ; this freezes the RTC registers
    lda DEC_CHARS, X
    sta HOUR_ADDRESS + 1
    lda DEC_CHARS, y
    sta HOUR_ADDRESS

    +splitByte .CIA_RTC_MINUTES
    lda DEC_CHARS, X
    sta MINUTE_ADDRESS + 1
    lda DEC_CHARS, y
    sta MINUTE_ADDRESS

    +splitByte .CIA_RTC_SECONDS
    lda DEC_CHARS, X
    sta SECOND_ADDRESS + 1
    lda DEC_CHARS, y
    sta SECOND_ADDRESS

    lda .CIA_RTC_TENTH_SECONDS               ; unfreeze registers
    jmp .SYSTEM_INTERRUPT    

.testEffect
    lda RUN_TITLE_EFFECT
    bne .doEffect
    jmp .SYSTEM_INTERRUPT

.doEffect
    inc .INTRPT_COUNTER
    lda .INTRPT_COUNTER
    cmp #25
    bne .systemISR

    lda #0
    sta .INTRPT_COUNTER

    inc EFFECT_COLOR
    lda EFFECT_COLOR
    and #$0F
    sta EFFECT_COLOR

    +move16Bit $9e, .SAVED_COLOR_POINTER 
    +load16BitImmediate $D80A, $9e

    ldx #0                 ; counter for lines
.loopEffectCol
    ldy #0                 ; counter for columns
    lda EFFECT_COLOR
.loopLineEffect
    sta ($9e), Y           ; store effect color in color RAM
    iny
    cpy #24            
    bne .loopLineEffect

    clc
    lda $9E
    adc #40
    sta $9E
    lda $9F
    adc #0
    sta $9F

    inx
    cpx #16
    bne .loopEffectCol

    +move16Bit .SAVED_COLOR_POINTER, $9e
.systemISR
    jmp .SYSTEM_INTERRUPT


; --------------------------------------------------
; resetAndStartRTC sets the system time of day clock to 00:00:00 and (re)starts it
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
resetAndStartRTC
    ; set base frequency for RTC to 50Hz
    lda .CIA_CONTROL_REG
    ora #%10000000
    sta .CIA_CONTROL_REG

    ; set rtc to 0
    lda #$00
    sta .CIA_RTC_HOURS
    sta .CIA_RTC_MINUTES
    sta .CIA_RTC_SECONDS
    sta .CIA_RTC_TENTH_SECONDS               ; this starts the RTC
    lda .CIA_RTC_TENTH_SECONDS               ; unfreeze RTC registers

    rts


; --------------------------------------------------
; stopRTC stops the RTC
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
stopRTC
    sei 
    lda .CIA_RTC_HOURS
    sta .CIA_RTC_HOURS
    cli
    rts