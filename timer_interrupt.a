!zone interrupt

.INTERRUPT_VECTOR = $0314
.SYSTEM_INTERRUPT = $EA31
.CIA_CONTROL_REG_B = $DC0F
.CIA_CONTROL_REG_A = $DC0E
.CIA_RTC_TENTH_SECONDS = $DC08
.CIA_RTC_SECONDS = $DC09
.CIA_RTC_MINUTES = $DC0A
.CIA_RTC_HOURS = $DC0B


; --------------------------------------------------
; initTimerInterrupt hooks the system interrupt vector an points it to a custom location
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
initTimerInterrupt
    sei
    +load16BitImmediate .interruptServiceRoutine, .INTERRUPT_VECTOR
    cli
    rts


; --------------------------------------------------
; deInitTimeInterrupt restores the system interruot vector to its original value
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
deInitTimeInterrupt
    sei
    +load16BitImmediate .SYSTEM_INTERRUPT, .INTERRUPT_VECTOR
    cli
    rts


!macro splitByte .data {
    ldy .data
    tya
    and #$0F
    tax
    tya
    and #$F0
    lsr
    lsr 
    lsr 
    lsr 
    tay
}


; --------------------------------------------------
; .interruptServiceRoutine renders the current time of the RTC and then jums to the origial ISR
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
.interruptServiceRoutine
    lda SHOW_TIMER
    beq .systemISR                           ; timer value is not to be rendered
 
    +splitByte .CIA_RTC_HOURS                ; this freezes the RTC registers
    lda DEC_CHARS, X
    sta HOUR_ADDRESS + 1
    lda DEC_CHARS, y
    sta HOUR_ADDRESS

    +splitByte .CIA_RTC_MINUTES
    lda DEC_CHARS, X
    sta MINUTE_ADDRESS + 1
    lda DEC_CHARS, y
    sta MINUTE_ADDRESS

    +splitByte .CIA_RTC_SECONDS
    lda DEC_CHARS, X
    sta SECOND_ADDRESS + 1
    lda DEC_CHARS, y
    sta SECOND_ADDRESS
    lda .CIA_RTC_TENTH_SECONDS               ; unfreeze registers    

.systemISR
    jmp .SYSTEM_INTERRUPT


; --------------------------------------------------
; resetAndStartRTC sets the system time of day clock to 00:00:00 and (re)starts it
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
resetAndStartRTC
    ; set rtc to 0
    lda #$00
    sta .CIA_RTC_HOURS
    sta .CIA_RTC_MINUTES
    sta .CIA_RTC_SECONDS
    sta .CIA_RTC_TENTH_SECONDS               ; this starts the RTC
    lda .CIA_RTC_TENTH_SECONDS               ; unfreeze RTC registers

    rts


; --------------------------------------------------
; stopRTC freezes the RTC registers
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
stopRTC
    sei 
    lda .CIA_RTC_HOURS
    sta .CIA_RTC_HOURS
    cli
    rts