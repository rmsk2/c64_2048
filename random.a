!zone random

SID_BASE = $D400
SID_NO = 0
SID_YES = 1

.USE_SID = SID_YES

initRandom
    ; Init PRNG
    lda #00
    sta LFSR_RESULT                       ; clear LFSR result
    jsr .getSeed
    
    ; Add current uptime to LFSR_STATE
    lda SEED_BYTES
    eor LFSR_STATE + 1
    sta LFSR_STATE + 1
    lda SEED_BYTES + 1
    eor LFSR_STATE + 2
    sta LFSR_STATE + 2

!if .USE_SID = SID_YES {
    ldx #15                           
    jsr qeuerySID                  ; read 15 cycles

    ; modify LFSR STATE with one byte read from SID
    lda SID_BYTES
    eor LFSR_STATE + 1
    sta LFSR_STATE + 1

    ; clock LFSR a number of times determined by values from SID
    ldx SID_BYTES
.moveLFSR
    jsr clockLFSR
    dex
    bne .moveLFSR

    ldx SID_BYTES+1
.moveLFSR2
    jsr clockLFSR
    dex
    bne .moveLFSR2    
}

    rts    

LFSR_STATE
    !byte $37, $AF, $BE
LFSR_RESULT
    !byte $00
LFSR_POLY
    !byte $9C,$CD,$AE
LFSR_CARRY
    !byte $00
;--------------------------------------------------
; clockLFSR implements a 24 bit Galois LFSR with polynomial 0x9CCDAE
; 
; INPUT:  None
; OUTPUT: Each clocking results in a new bit shifted fron the left into LFSR_RESULT 
; --------------------------------------------------
; Source https://www.maximintegrated.com/en/design/technical-documents/app-notes/4/4400.html
; int shift_lfsr(uint *lfsr, uint polynomial_mask)
; {
;     int feedback;
;     
;     feedback = *lfsr & 1;
;     *lfsr >>= 1;
;     if (feedback == 1)
;         *lfsr ^= polynomial_mask
;     return *lsfr;
; }
clockLFSR
    lda LFSR_STATE+2
    and #$01
    tax
    ; shift result byte left and or feedback bit into it
    lda LFSR_RESULT
    asl                          ; shift current result left
    cpx #01                      ; is feedback bit 1?
    bne .store                   ; no ....
    ora #01                      ; set least significant bit in result
.store
    sta LFSR_RESULT              ; store result

    ; shift state right
    lda LFSR_STATE
    lsr 
    sta LFSR_STATE
    lda #0
    bcc .next
    lda #$80
.next 
    sta LFSR_CARRY

    lda LFSR_STATE+1
    lsr 
    ora LFSR_CARRY
    sta LFSR_STATE+1
    lda #0
    bcc .next2
    lda #$80
.next2 
    sta LFSR_CARRY

    lda LFSR_STATE+2
    lsr 
    ora LFSR_CARRY
    sta LFSR_STATE+2

    cpx #01
    bne .skip2                   ; feedback bit is zero => we are done
    ; xor polynomial to shifted state if feedback bit is one
    lda LFSR_STATE
    eor LFSR_POLY
    sta LFSR_STATE
    lda LFSR_STATE+1
    eor LFSR_POLY+1
    sta LFSR_STATE+1
    lda LFSR_STATE+2
    eor LFSR_POLY+2
    sta LFSR_STATE+2
.skip2
    rts


.getSeed
    lda $A1
    sta SEED_BYTES
    lda $A2
    sta SEED_BYTES+1
    
    rts

SEED_BYTES
!byte $00, $00

!macro clearSID {
    ldx #0
    lda #0
.loopRegister
    sta SID_BASE, x
    inx
    cpx #25
    bne .loopRegister
}

.TMP_SID_COUNT
!byte $00
;--------------------------------------------------
; querySID reads a number of bytes from the SIDs white noise generator
; 
; INPUT:  x contains the number of cycles to perform
; OUTPUT: Last two bytes read are stored in SID_BYTES 
; --------------------------------------------------
qeuerySID
    ; save counter in memory
    stx .TMP_SID_COUNT
    ldx #0

    +clearSID

    lda #$ff  ; maximum frequency value
    sta $d40e ; voice 3 frequency low byte
    sta $d40f ; voice 3 frequency high byte
    lda #$80  ; noise waveform, gate bit off
    sta $d412 ; voice 3 control register

.nextCycle
    ; wait in order to make sure a new value is ready
    ldy #0
.count1
    iny
    bne .count1

    ; read first byte
    lda $d41b
    sta SID_BYTES

    ; wait in order to make sure a new value is ready
    ldy #0
.count2
    iny
    bne .count2

    ; read second byte
    lda $d41b
    sta SID_BYTES+1

    inx
    cpx .TMP_SID_COUNT         ; number of intended cycles reached?
    bne .nextCycle             ; no

    +clearSID 

    rts

SID_BYTES
!byte $00, $00
