!to "t2048", cbm
;*=$c000

*=$0801
;!byte $0c,$08,$e5,$07,$9e,$20,$32,$30,$36,$32,$00,$00,$00
!byte $0e,$08,$0A,$00,$97,$20
!byte $32,$30,$37,$35
!byte $2C,$38,$00,$19,$08,$14,$00 
!byte $9e,$20,$32,$30,$37,$36,$00,$00,$00
DEVICE_NUM
!byte DEV_NUM

!source "arith16.a"

!zone main
DEV_NUM = 8
TMP_PTR = $FB;$FC
TMP_PTR2 = $FD;$FE

GETIN   = $FFE4
JOYSTICK2 = $DC00
KEYBOARD_SELECTED = 0
JOYSTICK_SELECTED = 1
QUIT_CHAR_ASCII = 75 ; "k"
CHAR_YES = 89        ; "y"
CHAR_NO = 78         ; "n"
CHAR_LEFT = 65       ; "a"
CHAR_RIGHT = 68      ; "d"
CHAR_UP = 87         ; "w"
CHAR_DOWN = 83       ; "s"
CHAR_UNDO = 85       ; "u"
NO_TIMER = 0
VISIBLE_TIMER = 1
SOUND_ON = 1
SOUND_OFF = 0
EFFECT_OFF = 0
EFFECT_ON =  1
GAME_STOP = 0
GAME_CONTINUE = 1
NO_NEW_HI_SCORE = 0
ADDED_HI_SCORE_VALUE = 1
FIRST_RUN = 0
NOT_FIRST_RUN = 1


    ; set up title effect
    lda #EFFECT_ON
    sta RUN_TITLE_EFFECT
    lda #0
    sta EFFECT_COLOR

    ; set up timer
    lda #NO_TIMER
    sta SHOW_TIMER

    ; init timer interrupt
    jsr initTimerInterrupt

; --------------------------------------------------
; main implements the main loop of the game
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
main
    jsr initDrawing

    lda #KEYBOARD_SELECTED
    sta INPUT_METHOD
    lda #SOUND_ON
    sta USE_SOUND

    jsr diskSymbolOn
    jsr loadHiScore
    cmp #DISK_IO_OK
    beq .continueStart
    lda #COLOR_DARK_GREY
    jsr flashFrame
.continueStart
    jsr diskSymbolOff
    jsr showTitleScreen
    tax
    
    lda #EFFECT_OFF
    sta RUN_TITLE_EFFECT

    cpx #$88                          ; F7 was pressed
    bne .newGame
    jmp .mainDone

.newGame
    jsr initGame
.mainLoop
    jsr testPlayingFieldChanged   ; compare to playing field saved before last move
    cmp #NO_CHANGE_DETECTED
    bne .playfieldChangeDetected
    jsr signalIllegalMove
    jmp .renderOnly
.playfieldChangeDetected
    lda .FIRST_LOOP_ITERATION
    beq .addNewChar
    jsr persistState

.addNewChar
    jsr add2AtRandomPos
    lda .FIRST_LOOP_ITERATION
    bne .renderOnly
    lda #NOT_FIRST_RUN
    sta .FIRST_LOOP_ITERATION
    jsr saveState

.renderOnly
    jsr renderPlayingField
    jsr testPointsChanged         ; check if new points were awarded

    jsr lookForEleven
    cmp #ELEVEN_FOUND
    bne .checkGameOver            ; no eleven found. Game continues

    ; We have 2048 on the board => player wins
    jsr youWin
    jmp .askPlayAgain

.checkGameOver
    jsr areMoreMovesPossible     ; this also saves the playing field
    cmp #NO_POSSIBLE_MOVES_LEFT
    bne .waitForInput            ; There are still possible moves. Wait for next input

    ; no more moves possible => game over
    jsr printGameOver
    jsr addToHighScore
    cmp #ADDED_HI_SCORE_VALUE
    bne .over1
    jsr diskSymbolOn
    jsr saveHiScore
    cmp #DISK_IO_OK
    beq .over1
    lda #COLOR_DARK_GREY
    jsr flashFrame
.over1
    jsr diskSymbolOff
    jsr gameOver
    jsr stopRTC

    ; play again (y/n)?
.askPlayAgain
    jsr waitForKey
    cmp #CHAR_YES               ; y => restart game
    beq .newGame
    cmp #CHAR_NO                ; n => quit game
    bne .tryAgain
    jmp .mainDone               ; CHAR_NO pressed => quit game
.tryAgain
    jmp .askPlayAgain      ; neither y nor n => try again

    ; wait for and evaluate player input via keyboard or joystick
.waitForInput
    lda INPUT_METHOD
    bne .useJoystick 
    jsr waitForKey
    jmp .evalKeyPress
.useJoystick
    jsr waitForJoystick

.evalKeyPress
    cmp #CHAR_UP                        ; W => up
    beq .userInputUp
    cmp #CHAR_DOWN                      ; S => down
    beq .userInputDown
    cmp #CHAR_LEFT                      ; A => left
    beq .userInputLeft
    cmp #CHAR_RIGHT                     ; D => right
    beq .userInputRight
    cmp #QUIT_CHAR_ASCII                ; K => Kuit ;-)
    beq .userInputQuit
    cmp #CHAR_UNDO                      ; U => Undo last move
    beq .userInputUndo                  
    bne .waitForInput
.userInputUp
    jsr saveTempState
    jsr shiftUp
    jmp .mainLoop
.userInputDown
    jsr saveTempState
    jsr shiftDown
    jmp .mainLoop
.userInputLeft
    jsr saveTempState
    jsr shiftLeft
    jmp .mainLoop
.userInputRight
    jsr saveTempState
    jsr shiftRight
    jmp .mainLoop
.userInputUndo
    jsr restoreState
    jmp .waitForInput
.userInputQuit
    ; print "are you sure (y/n)?""
    jsr areYouSure
.askYouSure
    jsr waitForKey
.evalSureQuestion
    cmp #CHAR_YES               ; y => Really quit game
    beq .mainDone
    cmp #CHAR_NO                ; n => Continue game
    beq .continueGame
    jmp .askYouSure             ; neither y nor n => try again

.continueGame
    ; remove frame and continue game
    jsr clearFrame
    jsr renderPlayingField
    jmp .waitForInput

.mainDone
    jsr deInitTimeInterrupt
    jsr deInitDrawing

    rts


RUN_TITLE_EFFECT
!byte $00
EFFECT_COLOR
!byte $00
USE_SOUND
!byte 00
SHOW_TIMER
!byte $00
INPUT_METHOD
!byte $00

POWERS 
!byte $00, $02
!byte $00, $04
!byte $00, $08
!byte $00, $16
!byte $00, $32
!byte $00, $64
!byte $01, $28
!byte $02, $56
!byte $05, $12
!byte $10, $24
!byte $20, $48

.FIRST_LOOP_ITERATION
!byte 0

; --------------------------------------------------
; initGame inits a new game
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
initGame
    jsr initRandom
    jsr clearScreen
    jsr clearPlayingField
    jsr renderClock
    jsr resetAndStartRTC
    
    ; clear result counter
    lda #00
    sta POINTS
    sta POINTS+1
    sta POINTS+2

    ; clear old result
    sta POINTS_OLD
    sta POINTS_OLD+1
    sta POINTS_OLD+2

    jsr savePlayingField
    jsr add2AtRandomPos
    
    lda #VISIBLE_TIMER
    sta SHOW_TIMER

    lda #FIRST_RUN
    sta .FIRST_LOOP_ITERATION
    rts    

; --------------------------------------------------
; Wait for a key and return ASCII Code of key in Accumulator
; 
; INPUT:  None
; OUTPUT: ASCII code of read character in accumulator
; --------------------------------------------------
waitForKey
    jsr GETIN         ; get key from keyboard
    cmp #0            ; if 0, no key pressed
    beq waitForKey    ; loop if no key pressed

    rts               ; ASCII Code of pressed key is now in accumulator


; --------------------------------------------------
; Wait for a joystick move and return ASCII Code of direction 
; in accumulator. This is intended to be compatible with waitForKey
; 
; INPUT:  None
; OUTPUT: ASCII code of read character in accumulator
; --------------------------------------------------
waitForJoystick
.loopJoy
    ; Always allow keyboard input
    jsr GETIN         ; get key from keyboard
    cmp #0            ; if 0, no key pressed
    bne .waitNeutral

    ; if no key is pressed use jyostick
    lda JOYSTICK2
    cmp #$7e          ; up
    beq .upFound
    cmp #$7d          ; down
    beq .downFound
    cmp #$7b          ; left
    beq .leftFound
    cmp #$77          ; right   
    beq .rightFound
    cmp #$6f          ; fire
    beq .quitFound
    bne .loopJoy
.upFound
    lda #CHAR_UP
    jmp .waitNeutral
.downFound
    lda #CHAR_DOWN
    jmp .waitNeutral
.leftFound
    lda #CHAR_LEFT
    jmp .waitNeutral
.rightFound
    lda #CHAR_RIGHT
    jmp .waitNeutral
.quitFound
    lda #QUIT_CHAR_ASCII
    ; wait until joystick is in neutral position again
.waitNeutral
    ldy JOYSTICK2
    cpy #127
    bne .waitNeutral

    rts


POINTS 
!byte $00, $00, $00
PLAYINGFIELD
!byte $00, $00, $00, $00
!byte $00, $00, $00, $00
!byte $00, $00, $00, $00
!byte $00, $00, $00, $00
OLDPLAYINGFIELD
!byte $00, $00, $00, $00
!byte $00, $00, $00, $00
!byte $00, $00, $00, $00
!byte $00, $00, $00, $00
UNDOPLAYINGFIELD
!byte $00, $00, $00, $00
!byte $00, $00, $00, $00
!byte $00, $00, $00, $00
!byte $00, $00, $00, $00
UNDO_SCORE
!byte $00, $00, $00
TEMPLAYINGFIELD
!byte $00, $00, $00, $00
!byte $00, $00, $00, $00
!byte $00, $00, $00, $00
!byte $00, $00, $00, $00
TEMP_SCORE
!byte $00, $00, $00

HIGHSCORES
!byte $00, $00, $00
!byte $00, $00, $00
!byte $00, $00, $00
!byte $00, $00, $00
!byte $00, $00, $00
!byte $00, $00, $00
LATEST_SCORE
!byte $00, $00, $00


!macro copyField .source, .target {
    ldy #0                ; byte counter
.charLoop2    
    lda .source,Y         ; copy one byte
    sta .target,y
    iny                   ; increment byte counter
    cpy #16               ; end pos reached?
    bne .charLoop2        ; no, copy nect byte            
}

!macro copyScore .source, .target {
    lda .source
    sta .target
    lda .source + 1
    sta .target + 1
    lda .source + 2
    sta .target + 2    
}
; --------------------------------------------------
; savePlayingField copies the PLAYINGFIELD to OLDPLAYINGFIELD.
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
savePlayingField 
    +copyField PLAYINGFIELD, OLDPLAYINGFIELD
    rts        


; --------------------------------------------------
; restorePlayingField copies the  OLDPLAYINGFIELD to PLAYINGFIELD.
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
restorePlayingField 
    +copyField OLDPLAYINGFIELD, PLAYINGFIELD
    rts        

; --------------------------------------------------
; saveState copies the current state (playingfield, points) 
; of the game
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
saveState 
    +copyField PLAYINGFIELD, UNDOPLAYINGFIELD
    +copyScore POINTS, UNDO_SCORE
    rts 

; --------------------------------------------------
; restoreState restores the saved state (playingfield, points) 
; of the game and redraws the playing field
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
restoreState 
    +copyField UNDOPLAYINGFIELD, PLAYINGFIELD
    +copyScore UNDO_SCORE, POINTS
    jsr renderPlayingField
    rts 


saveTempState
    +copyField PLAYINGFIELD, TEMPLAYINGFIELD
    +copyScore POINTS, TEMP_SCORE
    rts

persistState
    +copyField TEMPLAYINGFIELD, UNDOPLAYINGFIELD
    +copyScore TEMP_SCORE, UNDO_SCORE
    rts

NO_CHANGE_DETECTED = 0
CHANGE_DETECTED = 1
; --------------------------------------------------
; testPlayingFieldChanged compares PLAYINGFIELD to OLDPLAYINGFIELD.
; 
; INPUT:  None
; OUTPUT: NO_CHANGE_DETECTED in accu if no change was detected. CHANGE_DETECTED otherwise
; --------------------------------------------------
testPlayingFieldChanged 
    ldy #0                   ; byte counter
.charLoop3    
    lda PLAYINGFIELD,Y
    cmp OLDPLAYINGFIELD,y    ; compare old with current
    bne .changeDetected      ; current pos differs => return
    iny                      ; increment byte counter
    cpy #16                  ; end pos reached?
    bne .charLoop3           ; no, test next pos
    lda #NO_CHANGE_DETECTED  ; playing fields does not differ
    rts
.changeDetected              ; playing fields differ
    lda #CHANGE_DETECTED
    rts               


POINTS_OLD
!byte $00, $00, $00
; --------------------------------------------------
; testPointsChanged compares POINTS and POINTS_OLD. If a difference was found it is signalled
; to the player that points were awarded
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
testPointsChanged
    lda POINTS
    cmp POINTS_OLD
    bne .pointsAwarded
    lda POINTS+1
    cmp POINTS_OLD+1
    bne .pointsAwarded
    lda POINTS+2
    cmp POINTS_OLD+2
    bne .pointsAwarded
    jmp .saveOldPoints

.pointsAwarded
    jsr signalPointsWon
.saveOldPoints
    lda POINTS
    sta POINTS_OLD
    lda POINTS+1
    sta POINTS_OLD+1
    lda POINTS+2
    sta POINTS_OLD+2
    rts

!macro makeTestMove .shiftRoutine {
    jsr .shiftRoutine
    jsr testPlayingFieldChanged
    cmp #NO_CHANGE_DETECTED
    beq .testNextMove
    lda #POSSIBLE_MOVES_LEFT
    sta CHECK_RES
    jmp doneMoves
.testNextMove
}

POSSIBLE_MOVES_LEFT = 1
NO_POSSIBLE_MOVES_LEFT = 0
CHECK_RES
!byte $00
.SAVE_RESULT
!byte $00, $00, $00
; --------------------------------------------------
; areMoreMovesPossible checks, if there are valid moves left. This routine
; simply tests all possible moves. If one move is detected that changes the
; playing field then there are still possible moves ;-).
; 
; INPUT:  None
; OUTPUT: POSSIBLE_MOVES_LEFT in accu if there are still moves possible, NO_POSSIBLE_MOVES_LEFT otherwise
; --------------------------------------------------
areMoreMovesPossible
    jsr savePlayingField
    ; save current results
    lda POINTS
    sta .SAVE_RESULT
    lda POINTS+1
    sta .SAVE_RESULT+1
    lda POINTS+2
    sta .SAVE_RESULT+2

    ; default return value is that there are no possible moves
    lda #NO_POSSIBLE_MOVES_LEFT
    sta CHECK_RES

    +makeTestMove shiftLeft

    jsr restorePlayingField
    +makeTestMove shiftRight

    jsr restorePlayingField
    +makeTestMove shiftUp

    jsr restorePlayingField  
    +makeTestMove shiftDown
    
doneMoves
    lda .SAVE_RESULT
    sta POINTS
    lda .SAVE_RESULT+1
    sta POINTS+1
    lda .SAVE_RESULT+2
    sta POINTS+2

    jsr restorePlayingField
    lda CHECK_RES
    rts

;--------------------------------------------------
; countUnusedElements counts all elements with a zero contents on the 
; playing field
; 
; INPUT:  None
; OUTPUT: Number of unused elemnts in accu
; --------------------------------------------------
countUnusedElements
    ldx #0
    ldy #0
.loopCountUnused
    lda PLAYINGFIELD,X
    bne .notZero              ; non zero element found. Skip increment result count
    iny
.notZero
    inx
    cpx #16
    bne .loopCountUnused
    tya

    rts


ELEVEN_FOUND = 1
NO_ELEVEN_FOUND = 0
;--------------------------------------------------
; lookForEleven searches for a value 11 = 2048 on the playing field. 
; If one is found, the player has reached the target
; 
; INPUT:  None
; OUTPUT: returns ELVEN_FOUND or NO_ELEVEN_FOUND in accu
; --------------------------------------------------
lookForEleven
    ldx #0
    ldy #NO_ELEVEN_FOUND
.loopLookFor11
    lda PLAYINGFIELD,X
    cmp #11
    bne .notEleven              ; element is not 11. Look at next element.
    ldy #ELEVEN_FOUND
    jmp .lookFor11Done
.notEleven
    inx
    cpx #16
    bne .loopLookFor11
.lookFor11Done
    tya

    rts


;--------------------------------------------------
; clearPlayingField sets all values in the playing field to 0.
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
clearPlayingField 
    ldy #0                ; byte counter
    lda #0
.charLoop4    
    sta PLAYINGFIELD,y    ; store 0 in playing field
    iny                   ; increment byte counter
    cpy #16
    bne .charLoop4

    rts


;--------------------------------------------------
; calcPlayFieldOffset calculates the offset of the position x,y 
; 
; INPUT:  x-pos (0-3) in register X, y-pos (0-3) in accu
;         X and A are not changed by this call
; OUTPUT: offset in register Y
; --------------------------------------------------
calcPlayFieldOffset
    pha            ; save accu
    asl            ; * 2
    asl            ; * 2
    stx .SCRATCH    ; x-pos in temp memory
    clc
    adc .SCRATCH    ; add x-pos to row base address
    tay            ; move result to y
    pla            ; restore accu
     
    rts
.SCRATCH !byte $00


;--------------------------------------------------
; addPoints adds a new value to the current result  
; 
; INPUT:  Value to add to current points as log_2 value 1-11 in accu
; OUTPUT: None
; --------------------------------------------------
addPoints
    ; transform 1-11 to 0-10
    ; in essence decrement contents of accumulator
    tay
    dey
    tya     
    ; calc offset of 2**(contents of accu)            
    asl                    ; *2
    tax 
    inx                    ; x now contains 2*accu + 1
    sed                    ; use BCD mode. This saves us from doing a hex => dec conversion when rendering the score
    clc
    ; add least significant digits of point value to result counter
    lda POINTS+2
    adc POWERS,X
    sta POINTS+2
    dex                    ; x now contains offset of the most significant digits of the point value
    ; add pint value to "medium" significant digits of result counter
    lda POINTS+1 
    adc POWERS,X
    sta POINTS+1
    ; add carry to most significant digits of result counter
    lda POINTS
    adc #00
    sta POINTS
    cld 
    rts


BUFFERIN   !byte $00, $00, $00, $00
BUFFERTEMP !byte $00, $00, $00, $00
TEMPLEN !byte $00

!macro compressBuffer .source, .target {
    ; Clear target buffer
    ; This macro copies all nonzero bytes from .soure to .target 
    ; at the end x contains the number of bytes copied
    lda #0             
    sta .target
    sta .target+1
    sta .target+2
    sta .target+3    
    ; remove all zero elements and write result to target
    ldy #0             ; read index
    ldx #0             ; write index
.loop4                 
    lda .source, Y     ; load input data
    cmp #0             ; Is it zero?
    beq .next          ; yes, write nothing
    sta .target, X     ; write nonzero value in target buffer
    inx                ; increment write offset
.next
    iny                ; increment read offset
    cpy #4             ; end reached?
    bne .loop4         ; no?
}


;--------------------------------------------------
; shiftRowLeft implements a left shift of a row. All other shifts of rows and 
; columns can be mapped to this. Input and output in BUFFERIN 
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
shiftRowLeft
    +compressBuffer BUFFERIN, BUFFERTEMP 

    ; X holds number of bytes copied
    cpx #0
    beq .done            ; no bytes were transferred => Input data was all zero. Nothing else to do
    cpx #1               
    beq .doCopy          ; Only one byte was copied, no merging necessary, only copy data back to BUFFERIN

    ; Here BUFFERTEMP contains at least two nonzero elements
    ; perform merging of equal elements
    ; we have a sliding window of length two, that is moved over the conpressed buffer from left to right
    dex                  
    stx TEMPLEN          ; now x contains the last nonzero position in BUFFERTEMP
    ldx #0               ; Begin of sliding window at pos 0
    ldy #1               ; End of sliding window at pos 1
.mergeLoop
    lda BUFFERTEMP, X    ; load frist and second element of window
    cmp BUFFERTEMP, Y
    bne .skip            ; Elements not equal. Move window one position
    lda #0               ; Elements in window are equal, merge them
    sta BUFFERTEMP, y    ; clear second element of window
    inc BUFFERTEMP, X    ; increment first window element

    ; save registers
    txa
    pha
    tya
    pha

    ; add points
    lda BUFFERTEMP, X
    jsr addPoints
    ; restore registers
    pla
    tay
    pla
    tax

    inx                  ; move window two elements
    inx
    iny
    iny
    cpx TEMPLEN
    bcc .mergeLoop       ; start of window < last pos with nonzero element
    bcs .doCopy          ; start of window >= last pos with zero element
.skip
    inx
    iny
    cpx TEMPLEN         ; has window reached last position?
    bne .mergeLoop      ; no, process next element
    ; x is at last nonzero position, therefore there is no more element to merge with

.doCopy
    +compressBuffer BUFFERTEMP, BUFFERIN
.done
    rts


!macro reverse .buffer {
    lda .buffer
    ldy .buffer+3
    sta .buffer+3
    sty .buffer
    lda .buffer+1
    ldy .buffer+2
    sta .buffer+2
    sty .buffer+1    
}


;--------------------------------------------------
; shiftRowRight implements a right shift of a row.
; Input and output in BUFFERIN 
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
shiftRowRight
    +reverse BUFFERIN
    jsr shiftRowLeft
    +reverse BUFFERIN

    rts


ROWCOUNT !byte $00
COLCOUNT !byte $00
;--------------------------------------------------
; shiftPlayingField implements shifting the playing field. If .slow is equal to ROWCOUNT then
; the shift is horizontal. If .slow is set to COLCOUNT a vertical shift is performed. The parameter
; shiftCall then determines whether the shift is left/right or up/down. 
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
!macro shiftPlayingField .slow, .fast, .shiftCall {
    lda #0
    sta .slow                    ; .slow is the slow counter
    sta .fast                    ; .fast is the fast counter

.count1CopyLoop
    ; Copy data into BUFFERIN
    lda ROWCOUNT
    ldx COLCOUNT
    jsr calcPlayFieldOffset           ; returns playing field offset in y
    lda PLAYINGFIELD, y
    ldx .fast
    sta BUFFERIN, X
    inc .fast
    lda .fast
    cmp #04
    bne .count1CopyLoop

    ; perform shift
    jsr .shiftCall

    ; reset fast counter
    lda #00
    sta .fast

    ; copy data back
.count1CopyBack
    lda ROWCOUNT
    ldx COLCOUNT
    jsr calcPlayFieldOffset           ; returns playing field offset in y
    ldx .fast
    lda BUFFERIN, x
    sta PLAYINGFIELD, Y
    inc .fast
    lda .fast
    cmp #04
    bne .count1CopyBack

    ; reset fast counter
    lda #00
    sta .fast

    ; increment and test slow counter
    inc .slow
    lda .slow
    cmp #04
    bne .count1CopyLoop
    rts
} 

shiftLeft
    +shiftPlayingField ROWCOUNT, COLCOUNT, shiftRowLeft

shiftRight
    +shiftPlayingField ROWCOUNT, COLCOUNT, shiftRowRight

shiftUp
    +shiftPlayingField COLCOUNT, ROWCOUNT, shiftRowLeft

shiftDown
    +shiftPlayingField COLCOUNT, ROWCOUNT, shiftRowRight


PLACEMENT_SUCCESS = 0
PLACEMENT_FAIL = 1
;--------------------------------------------------
; add2AtRandomPos adds a "2" to the playing field at a random location
; 
; INPUT:  None
; OUTPUT: accumulator contains PLACEMENT_SUCCESS, if the "2" was placed successfully. 
;         Otherwise a PLACEMENT_FAIL is written to the accu. This means all elements of 
;         the playing field are already used. 
; --------------------------------------------------
add2AtRandomPos
    ; check if there is an empty space on the playing field
    jsr countUnusedElements
    cmp #0
    bne .continueAdd2
    lda #PLACEMENT_FAIL
    rts                                     ; no free space was found

    ; here we know that at least one free element exists
.continueAdd2
    ; clear LFSR result
    lda #0
    sta LFSR_RESULT
    ; get 4 pseudorandom bits
    jsr clockLFSR
    jsr clockLFSR
    jsr clockLFSR
    jsr clockLFSR

    ldx LFSR_RESULT                        ; position to look at in X-register‚
.tryNextPosition
    lda PLAYINGFIELD, X                    ; zero flag is set when loaded value is zero
    beq .foundFreeElement                  ; a zero was loaded, i.e. field is empty  => write "2" 

    jsr clockLFSR                          ; get one more pseudorandom bit
    lda #$0F
    and LFSR_RESULT                        ; mask out the lower four bit of LFSR_RESULT
    tax                                    ; load new position in X register
    jmp .tryNextPosition

.foundFreeElement
    lda #01
    sta PLAYINGFIELD, X                    ; write a "2" at position X
    lda #PLACEMENT_SUCCESS                 ; all OK => return 0
    rts


.NEW_HI_SCORE_VALUE
!byte $00
;--------------------------------------------------
; addToHighScore adds the last result to the high score list using bubble
; sort to find the right spot
; 
; INPUT:  None
; OUTPUT: accu contains nonzero value in case a new
; hi score value was added 
; --------------------------------------------------
addToHighScore
    lda #NO_NEW_HI_SCORE
    sta .NEW_HI_SCORE_VALUE
    jsr saveCurrentPoints

    ldx #18
.bubble
    jsr comparePoints
    cmp #$FF                   
    bne .doneAddHiScore           ; current value is equal or smaller as the one above it => we are done
    jsr swapPoints                ; bubble current value up
    lda #ADDED_HI_SCORE_VALUE
    sta .NEW_HI_SCORE_VALUE
    dex                           ; move up one value
    dex
    dex
    cpx #0                        ; we have reached the top, we are done
    bne .bubble

.doneAddHiScore
    lda .NEW_HI_SCORE_VALUE
    rts


;--------------------------------------------------
; comparePoints compares two 3 byte high score values referenced through the 
; x-register. The value referenced is compared with the one preceeding it
; 
; INPUT:  index of source for comparison in x (3, 6, 9, 12, 15, 18)
; OUTPUT: 0, 1, -1 (0xFF) in accu depending whether the referenced value is
; =, < or > of the one preceeding it in the high score list  
; --------------------------------------------------
comparePoints
    txa
    tay
    ; generate previous index: y = x - 3
    dey
    dey
    dey
    ; compare MSB
    lda HIGHSCORES, X
    cmp HIGHSCORES, Y
    beq .next1                 ; values are equal continue to compare
    bcc .smaller               ; value referenced by x is smaller as the one referenced by y
    bcs .larger                ; value referenced by x is larger as the one referenced by y 
.next1
    ; compare medium significant byte
    lda HIGHSCORES + 1, X
    cmp HIGHSCORES + 1, Y
    beq .next2                 ; values are equal up to this positon, continue to compare
    bcc .smaller
    bcs .larger
.next2
    ; compare LSB
    lda HIGHSCORES + 2, X
    cmp HIGHSCORES + 2, Y
    beq .equal                 ; values are overall equal
    bcc .smaller
    bcs .larger
.smaller
    lda #1
    rts
.larger
    lda #0xFF
    rts
.equal
    lda #0
    rts



.SWAP_TEMP
!byte $00
;--------------------------------------------------
; swapPoints swaps two 3 byte high score values referenced through the 
; x-register. The value referenced is swapped with the one preceeding it
; 
; INPUT:  index of source for swapping in x (3, 6, 9, 12, 15, 18)
; OUTPUT: None  
; --------------------------------------------------
swapPoints
    txa
    tay
    ; generate previous index: y = x - 3
    dey
    dey
    dey

    ; swap most signifiatn byte
    lda HIGHSCORES, y
    sta .SWAP_TEMP
    lda HIGHSCORES, x
    sta HIGHSCORES, y
    lda .SWAP_TEMP
    sta HIGHSCORES, x

    ; swap medium signifiatn byte
    lda HIGHSCORES + 1, y
    sta .SWAP_TEMP
    lda HIGHSCORES + 1, x
    sta HIGHSCORES + 1, y
    lda .SWAP_TEMP
    sta HIGHSCORES + 1, x

    ; swap lwast significatn byte
    lda HIGHSCORES + 2, y
    sta .SWAP_TEMP
    lda HIGHSCORES + 2, x
    sta HIGHSCORES + 2, y
    lda .SWAP_TEMP
    sta HIGHSCORES + 2, x

    rts


;--------------------------------------------------
; saveCurrentPoints copies the current value of achieved points to the
; end of the high score list
; 
; INPUT:  None
; OUTPUT: None  
; --------------------------------------------------
saveCurrentPoints
    lda POINTS
    sta LATEST_SCORE
    lda POINTS + 1
    sta LATEST_SCORE + 1
    lda POINTS + 2
    sta LATEST_SCORE + 2

    rts

!source "t2048draw.a"
!source "timer_interrupt.a"
!source "beep.a"
!source "random.a"
!source "font.a"
!source "disk_io.a"

;TEST=0
!ifdef TEST {
!source "tests.a"    
}

; label, which serves the purpose to detect when this programm becomes so big
; that the code is cutting into the font at $3000
END
    nop
